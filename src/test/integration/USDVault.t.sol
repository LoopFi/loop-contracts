// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.19;

import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import {ERC4626} from "@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol";

import {PRBProxy} from "prb-proxy/PRBProxy.sol";
import {PRBProxyRegistry} from "../../prb-proxy/PRBProxyRegistry.sol";
import {WAD} from "../../utils/Math.sol";

import {IntegrationTestBase} from "./IntegrationTestBase.sol";

import {PermitParams} from "../../proxy/TransferAction.sol";
import {PoolAction, PoolActionParams, Protocol} from "../../proxy/PoolAction.sol";

import {ApprovalType, PermitParams} from "../../proxy/TransferAction.sol";
import {ISignatureTransfer} from "permit2/interfaces/ISignatureTransfer.sol";
import {PermitMaker} from "../utils/PermitMaker.sol";
import {PositionAction4626} from "../../proxy/PositionAction4626.sol";

import {IVault, JoinKind, JoinPoolRequest} from "../../vendor/IBalancerVault.sol";
import {IPoolV3} from "src/interfaces/IPoolV3.sol";

import {TokenInput, LimitOrderData} from "pendle/interfaces/IPAllActionTypeV3.sol";
import {ApproxParams} from "pendle/router/math/MarketApproxLibV2.sol";

import {TestBase} from "src/test/TestBase.sol";
import {Test} from "forge-std/Test.sol";
import {ActionMarketCoreStatic} from "pendle/offchain-helpers/router-static/base/ActionMarketCoreStatic.sol";
import {IUniswapV3Router, decodeLastToken, UniswapV3Router_decodeLastToken_invalidPath} from "../../vendor/IUniswapV3Router.sol";
import {IVault as IBalancerVault} from "../../vendor/IBalancerVault.sol";
import {IPActionAddRemoveLiqV3} from "pendle/interfaces/IPActionAddRemoveLiqV3.sol";
import {SwapData, SwapType as SwapTypePendle} from "pendle/router/swap-aggregator/IPSwapAggregator.sol";
import {PoolAction} from "src/proxy/PoolAction.sol";
import {SwapAction, SwapParams, SwapType, SwapProtocol} from "src/proxy/SwapAction.sol";
import {PositionActionTranchess, LeverParams} from "src/proxy/PositionActionTranchess.sol";
import {CollateralParams, CreditParams} from "../../proxy/PositionAction.sol";
import {console} from "forge-std/console.sol";
import {CDPVault} from "src/CDPVault.sol";
import {ICDPVault} from "src/interfaces/ICDPVault.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {IERC20Metadata} from "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol";
import {IVault as IBalancerVault, JoinKind, JoinPoolRequest} from "../../vendor/IBalancerVault.sol";
import {IUniswapV3Router} from "../../vendor/IUniswapV3Router.sol";
import {PermitParams} from "../../proxy/TransferAction.sol";
import {IUniswapV3Router, ExactInputParams, ExactOutputParams, decodeLastToken} from "../../vendor/IUniswapV3Router.sol";
import {Constants} from "src/vendor/Constants.sol";
import {Commands} from "src/vendor/Commands.sol";
import {CDPVaultSpectra} from "src/CDPVaultSpectra.sol";
import {Flashlender} from "src/Flashlender.sol";
import {CDPVaultConstants, CDPVaultConfig} from "src/CDPVault.sol";
import {GaugeV3} from "src/quotas/GaugeV3.sol";
import {PoolQuotaKeeperV3} from "src/quotas/PoolQuotaKeeperV3.sol";
import {LoopVoter} from "src/quotas/LoopVoter.sol";
import {Combined4626AggregatorV3Oracle} from "src/oracle/Combined4626AggregatorV3Oracle.sol";
import {CombinedAggregatorV3Oracle} from "src/oracle/CombinedAggregatorV3Oracle.sol";
import {ChainlinkCurveOracle} from "src/oracle/ChainlinkCurveOracle.sol";

interface IWETH {
    function deposit() external payable;
}

contract MockUniswap {
    function exactInput(ExactInputParams memory params) external returns (uint256) {
        (address assetIn, address assetOut, uint256 amountOut) = abi.decode(params.path, (address, address, uint256));
        IERC20(assetIn).transferFrom(msg.sender, address(this), params.amountIn);
        IERC20(assetOut).transfer(msg.sender, amountOut);
        return amountOut;
    }

    function exactOutput(ExactOutputParams memory params) external returns (uint256) {
        (address assetIn, address assetOut, uint256 amountIn) = abi.decode(params.path, (address, address, uint256));
        IERC20(assetIn).transferFrom(msg.sender, address(this), amountIn);
        IERC20(assetOut).transfer(msg.sender, params.amountOut);
        return amountIn;
    }
}

contract USDVaultTest is TestBase {
    using SafeERC20 for ERC20;
    PoolAction poolAction;
    SwapAction swapAction;
    PositionActionTranchess positionAction;

    PRBProxyRegistry prbProxyRegistry;

    MockUniswap uniswap;

    address internal constant BALANCER_VAULT = 0xBA12222222228d8Ba445958a75a0704d566BF2C8;
    address internal constant UNISWAP_V3 = 0xE592427A0AEce92De3Edee1F18E0157C05861564;
    address internal constant PENDLE_ROUTER = 0x888888888889758F76e7103c6CbF23ABbF58F946;
    ERC20 internal constant USDC = ERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);

    address internal constant SPECTRA_ROUTER = 0xD733e545C65d539f588d7c3793147B497403F0d2;
    address curvePool = address(0xFb7c3C95f4C2C05F6eC7dcFE3e368a40eB338603);
    address vaultCollateral = address(0x09d484B738dD85CE3953102453E91507982121d0);

    IPoolV3 usdcPool = IPoolV3(0x0eecBDbF7331B8a50FCd0Bf2C267Bf47BD876054);
    // user
    PRBProxy userProxy;
    address internal user;
    uint256 internal userPk;
    uint256 internal constant NONCE = 0;

    uint256 constant USDC_SCALE = 10 ** 6;

    CDPVaultSpectra vault;

    PermitParams emptyPermitParams;
    SwapParams emptySwap;
    PoolActionParams emptyJoin;

    // univ3
    IUniswapV3Router univ3Router = IUniswapV3Router(UNISWAP_V3);
    IBalancerVault internal constant balancerVault = IBalancerVault(BALANCER_VAULT);
    // kyber
    address kyberRouter = 0x6131B5fae19EA4f9D964eAc0408E4408b66337b5;

    address admin = address(0x9B2205E4E62e333141117Fc895DC77B558E2a2BC);

    Flashlender public flashlenderUsdc;

    function setUp() public virtual override {
        vm.createSelectFork(vm.rpcUrl("mainnet"), 22038422);
        usePatchedDeal = true;
        super.setUp();

        flashlenderUsdc = new Flashlender(usdcPool, 0);

        vm.prank(admin);
        usdcPool.setCreditManagerDebtLimit(address(flashlenderUsdc), type(uint256).max);

        prbProxyRegistry = new PRBProxyRegistry();

        poolAction = new PoolAction(address(0), address(0), address(0), SPECTRA_ROUTER);

        swapAction = new SwapAction(
            balancerVault,
            IUniswapV3Router(address(uniswap)),
            IPActionAddRemoveLiqV3(PENDLE_ROUTER),
            kyberRouter,
            address(0),
            SPECTRA_ROUTER
        );

        // deploy position actions
        positionAction = new PositionActionTranchess(
            address(flashlenderUsdc),
            address(swapAction),
            address(poolAction),
            address(vaultRegistry),
            address(0)
        );

        // configure permissions and system settings
        setGlobalDebtCeiling(15_000_000 ether);

        // Combined4626AggregatorV3Oracle feed = new Combined4626AggregatorV3Oracle(
        //     address(0x89F48f6671Ec1B1C4f6abE964EBdd21F4eb7076f),
        //     type(uint256).max,
        //     address(0x5C5b196aBE0d54485975D1Ec29617D42D9198326)
        // );

        // CombinedAggregatorV3Oracle feed2 = new CombinedAggregatorV3Oracle(
        //     address(feed),
        //     type(uint256).max,
        //     address(0x8fFfFfd4AfB6115b954Bd326cbe7B4BA576818f6),
        //     type(uint256).max,
        //     false
        // );

        // ChainlinkCurveOracle oracle = new ChainlinkCurveOracle(
        //     address(feed2),
        //     address(0xFb7c3C95f4C2C05F6eC7dcFE3e368a40eB338603),
        //     type(uint256).max
        // );

        oracle.updateSpot(address(vaultCollateral), 1940582394927150593);

        CDPVaultConstants memory cdPVaultConstants = CDPVaultConstants({
            pool: usdcPool,
            oracle: oracle,
            token: IERC20(vaultCollateral),
            tokenScale: 10 ** IERC20Metadata(vaultCollateral).decimals()
        });

        CDPVaultConfig memory cdPVaultConfig = CDPVaultConfig({
            debtFloor: 0,
            liquidationRatio: 1.05 ether,
            liquidationPenalty: 1.0 ether,
            liquidationDiscount: 1.05 ether,
            roleAdmin: address(this),
            vaultAdmin: address(this),
            pauseAdmin: address(this)
        });

        vault = new CDPVaultSpectra(cdPVaultConstants, cdPVaultConfig);
        vaultRegistry.addVault(ICDPVault(address(vault)));
        vm.label({account: address(vault), newLabel: "CDPVault"});

        vm.startPrank(admin);
        usdcPool.setCreditManagerDebtLimit(address(vault), 5_000_000 ether);
        vm.stopPrank();

        // create gauge and set gauge
        vm.startPrank(admin);
        quotaKeeper.setCreditManager(address(vaultCollateral), address(vault));
        if (!gauge.isTokenAdded(address(vaultCollateral))) {
            gauge.addQuotaToken(address(vaultCollateral), 10, 100);
        }
        gauge.setFrozenEpoch(false);
        vm.stopPrank();

        // vm.warp(block.timestamp + 1 weeks);
        vm.prank(address(gauge));
        quotaKeeper.updateRates();

        // setup user and userProxy
        userPk = 0x12341234;
        user = vm.addr(userPk);
        userProxy = PRBProxy(payable(address(prbProxyRegistry.deployFor(user))));
        vm.label({account: address(userProxy), newLabel: "userProxy"});
        vm.label({account: address(user), newLabel: "user"});
        vm.label({account: address(vault), newLabel: "vault"});
        vm.label({account: address(vaultCollateral), newLabel: "vaultCollateral"});
        vm.label({account: address(usdcPool), newLabel: "usdcPool"});
        vm.label({account: address(flashlenderUsdc), newLabel: "flashlenderUsdc"});
        vm.label({account: address(positionAction), newLabel: "positionAction"});
        vm.label({account: address(swapAction), newLabel: "swapAction"});
        vm.label({account: address(poolAction), newLabel: "poolAction"});
        vm.label({account: address(gauge), newLabel: "gauge"});
        vm.label({account: address(quotaKeeper), newLabel: "quotaKeeper"});
        vm.label({account: address(oracle), newLabel: "oracle"});
        vm.label({account: address(USDC), newLabel: "USDC"});
        vm.label({account: address(this), newLabel: "this"});
    }

    function createAndSetPoolQuotaKeeper() internal override {
        quotaKeeper = new PoolQuotaKeeperV3(address(usdcPool));
        
        vm.startPrank(admin);
        usdcPool.setPoolQuotaKeeper(address(quotaKeeper));
        vm.stopPrank();

        voter = new LoopVoter(address(addressProvider), block.timestamp);
        gauge = new GaugeV3(address(usdcPool), address(voter));

        vm.startPrank(admin);
        quotaKeeper.setGauge(address(gauge));
        vm.stopPrank();
    }

    function test_deposit() public {
        deal(address(USDC), user, 1000 * USDC_SCALE);
        vm.startPrank(user);
        USDC.approve(address(usdcPool), 1000 * USDC_SCALE);
        usdcPool.deposit(1000 * USDC_SCALE, user);
        vm.stopPrank();

        assertEq(usdcPool.balanceOf(user), 1000 * USDC_SCALE);
    }

    function test_withdraw() public {
        deal(address(USDC), user, 1000 * USDC_SCALE);
        vm.startPrank(user);
        USDC.approve(address(usdcPool), 1000 * USDC_SCALE);
        usdcPool.deposit(1000 * USDC_SCALE, user);

        usdcPool.withdraw(1000 * USDC_SCALE, user, user);
        vm.stopPrank();

        assertEq(usdcPool.balanceOf(user), 0);
        assertEq(USDC.balanceOf(address(user)), 1000 * USDC_SCALE);
    }

    function test_borrow() public {
        uint256 liquidityAmount = 1_000_000 * USDC_SCALE;

        deal(address(USDC), address(usdcPool), liquidityAmount);

        uint256 collateralAmount = 1_000 * WAD;
        uint256 borrowAmount = 500 * USDC_SCALE;

        deal(address(vaultCollateral), user, collateralAmount);

        vm.startPrank(user);
        IERC20(vaultCollateral).approve(address(vault), collateralAmount);
        uint256 tokenAmountScaled = vault.deposit(user, collateralAmount);
        emit log_named_uint("tokenAmountScaled", tokenAmountScaled);

        vault.borrow(user, user, borrowAmount);
        vm.stopPrank();

        assertEq(USDC.balanceOf(address(user)), borrowAmount);
    }

    function test_repay() public {
        uint256 liquidityAmount = 1_000_000 * USDC_SCALE;

        deal(address(USDC), address(usdcPool), liquidityAmount);

        uint256 collateralAmount = 1_000 * WAD;
        uint256 borrowAmount = 500 * USDC_SCALE;

        deal(address(vaultCollateral), user, collateralAmount);

        vm.startPrank(user);
        IERC20(vaultCollateral).approve(address(vault), collateralAmount);
        uint256 tokenAmountScaled = vault.deposit(user, collateralAmount);
        emit log_named_uint("tokenAmountScaled", tokenAmountScaled);

        vault.borrow(user, user, borrowAmount);
        
        vm.stopPrank();

        assertEq(USDC.balanceOf(address(user)), borrowAmount);

        vm.startPrank(user);
        USDC.approve(address(vault), borrowAmount);
        vault.repay(user, user, borrowAmount);
        vm.stopPrank();

        assertEq(USDC.balanceOf(address(user)), 0);
    }

    function test_increaseLever() public {
        uint256 liquidityAmount = 1_000_000 * USDC_SCALE;
        deal(address(USDC), address(usdcPool), liquidityAmount);

        bytes memory args = hex"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000009d484b738dd85ce3953102453e91507982121d0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000040012040c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000a600000000000000000000000000000000000000000000000000000000000000ae00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000012a05f2000000000000000000000000000000000000000000000000000000000000000960000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000012a05f20000000000000000000000000015700b564ca08d9439c58ca5053166e8317aa138000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000884e21fd0e900000000000000000000000000000000000000000000000000000000000000200000000000000000000000000f4a1d7fdf4890be35e71f3e0bbc4a0ec377eca3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000005e000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000015700b564ca08d9439c58ca5053166e8317aa138000000000000000000000000d733e545c65d539f588d7c3793147b497403f0d20000000000000000000000000000000000000000000000000000000067d2ed5a00000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004063407a490000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000f4a1d7fdf4890be35e71f3e0bbc4a0ec377eca3000000000000000000000000e780df05ed3d1d29b35edaf9c8f3131e9f4c799e000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000015700b564ca08d9439c58ca5053166e8317aa138000000000000000000000000000000000000000000000000000000012a05f20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000011c0cc1c7d1b2c000000000000010ee41a7db3f7e032d8000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000015700b564ca08d9439c58ca5053166e8317aa138000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000d733e545c65d539f588d7c3793147b497403f0d2000000000000000000000000000000000000000000000000000000012a05f20000000000000000000000000000000000000000000000010d895ceb278c657a450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000f4a1d7fdf4890be35e71f3e0bbc4a0ec377eca30000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000012a05f20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002607b22536f75726365223a226c6f6f70222c22416d6f756e74496e555344223a22353030332e373732313235303239353035222c22416d6f756e744f7574555344223a22353030342e393932343137363634373635222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a2234393937303537343837393033353332323636323030222c2254696d657374616d70223a313734313837353337302c22526f7574654944223a2266613738313636302d666463612d346435372d383232312d373363313764313035653036222c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a225a7346765938725a464c34656678314e323230724b6a6474593639767a4364324a4773465865476e764a577048476656704576466d686164437570596f512f414862514768394e776d796d797a6e2f67744b342f5477304b446b4a4d2b3137544c71415a4f5a734d69674c6a4c6b4b4e6258714a62787568384d463131626354387774357a6c686b682b4f7a494f656b527a31575250746f684b6b4c73676553523266764b58515737502b642b47584c3336546835456869304f7934374b302f584869457739615648576361777838587669653339704c335479413159505935563555326e6d7267444f7037594b625373724c4937425151597345514a6668394d784f53487170576431687a5348334e66555773614f702b726a57337568474d644c7663707a4f524d56465a316b32757a61457871544d6969546f32506b535944356d6158526d6a4c564c333355696674432b6174413d3d227d7d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000005c5b196abe0d54485975d1ec29617d42d9198326800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000fb7c3c95f4c2c05f6ec7dcfe3e368a40eb3386038000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003C786eec72204b391Fc3B339CEf2E84351999Ea6";

        LeverParams memory leverParams = LeverParams({
            position: address(userProxy),
            vault: address(vault),
            collateralToken: address(vaultCollateral),
            primarySwap: SwapParams({
                swapProtocol: SwapProtocol.SPECTRA,
                swapType: SwapType.EXACT_IN,
                assetIn: address(USDC),
                amount: 4000 * USDC_SCALE,
                limit: 0,
                recipient: address(positionAction),
                residualRecipient: address(positionAction),
                deadline: type(uint256).max,
                args: args
            }),
            auxSwap: emptySwap,
            auxAction: PoolActionParams({
                protocol: Protocol.SPECTRA,
                minOut: 0,
                recipient: address(positionAction),
                args: bytes("")
            })
        });

        deal(address(USDC), address(user), 1_000 * USDC_SCALE);
        deal(address(USDC), address(userProxy), 1_000 * USDC_SCALE);

        vm.startPrank(user);
        USDC.approve(address(userProxy), 1_000 * USDC_SCALE);
        userProxy.execute(
            address(positionAction),
            abi.encodeWithSelector(
                positionAction.increaseLever.selector,
                leverParams,
                address(USDC),
                1_000 * USDC_SCALE,
                address(user),
                emptyPermitParams
            )
        );
    }

    function test_decreaseLever() public {
        uint256 liquidityAmount = 1_000_000 * USDC_SCALE;
        deal(address(USDC), address(usdcPool), liquidityAmount);

        {
        bytes memory args = hex"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000009d484b738dd85ce3953102453e91507982121d0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000040012040c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000a600000000000000000000000000000000000000000000000000000000000000ae00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000012a05f2000000000000000000000000000000000000000000000000000000000000000960000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000012a05f20000000000000000000000000015700b564ca08d9439c58ca5053166e8317aa138000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000884e21fd0e900000000000000000000000000000000000000000000000000000000000000200000000000000000000000000f4a1d7fdf4890be35e71f3e0bbc4a0ec377eca3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000005e000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000015700b564ca08d9439c58ca5053166e8317aa138000000000000000000000000d733e545c65d539f588d7c3793147b497403f0d20000000000000000000000000000000000000000000000000000000067d2ed5a00000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004063407a490000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000f4a1d7fdf4890be35e71f3e0bbc4a0ec377eca3000000000000000000000000e780df05ed3d1d29b35edaf9c8f3131e9f4c799e000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000015700b564ca08d9439c58ca5053166e8317aa138000000000000000000000000000000000000000000000000000000012a05f20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000011c0cc1c7d1b2c000000000000010ee41a7db3f7e032d8000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000015700b564ca08d9439c58ca5053166e8317aa138000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000d733e545c65d539f588d7c3793147b497403f0d2000000000000000000000000000000000000000000000000000000012a05f20000000000000000000000000000000000000000000000010d895ceb278c657a450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000f4a1d7fdf4890be35e71f3e0bbc4a0ec377eca30000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000012a05f20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002607b22536f75726365223a226c6f6f70222c22416d6f756e74496e555344223a22353030332e373732313235303239353035222c22416d6f756e744f7574555344223a22353030342e393932343137363634373635222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a2234393937303537343837393033353332323636323030222c2254696d657374616d70223a313734313837353337302c22526f7574654944223a2266613738313636302d666463612d346435372d383232312d373363313764313035653036222c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a225a7346765938725a464c34656678314e323230724b6a6474593639767a4364324a4773465865476e764a577048476656704576466d686164437570596f512f414862514768394e776d796d797a6e2f67744b342f5477304b446b4a4d2b3137544c71415a4f5a734d69674c6a4c6b4b4e6258714a62787568384d463131626354387774357a6c686b682b4f7a494f656b527a31575250746f684b6b4c73676553523266764b58515737502b642b47584c3336546835456869304f7934374b302f584869457739615648576361777838587669653339704c335479413159505935563555326e6d7267444f7037594b625373724c4937425151597345514a6668394d784f53487170576431687a5348334e66555773614f702b726a57337568474d644c7663707a4f524d56465a316b32757a61457871544d6969546f32506b535944356d6158526d6a4c564c333355696674432b6174413d3d227d7d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000005c5b196abe0d54485975d1ec29617d42d9198326800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000fb7c3c95f4c2c05f6ec7dcfe3e368a40eb3386038000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003C786eec72204b391Fc3B339CEf2E84351999Ea6";

        LeverParams memory leverParams = LeverParams({
            position: address(userProxy),
            vault: address(vault),
            collateralToken: address(vaultCollateral),
            primarySwap: SwapParams({
                swapProtocol: SwapProtocol.SPECTRA,
                swapType: SwapType.EXACT_IN,
                assetIn: address(USDC),
                amount: 4000 * USDC_SCALE,
                limit: 0,
                recipient: address(positionAction),
                residualRecipient: address(positionAction),
                deadline: type(uint256).max,
                args: args
            }),
            auxSwap: emptySwap,
            auxAction: PoolActionParams({
                protocol: Protocol.SPECTRA,
                minOut: 0,
                recipient: address(positionAction),
                args: bytes("")
            })
        });

        deal(address(USDC), address(user), 1_000 * USDC_SCALE);
        deal(address(USDC), address(userProxy), 1_000 * USDC_SCALE);

        vm.startPrank(user);
        USDC.approve(address(userProxy), 1_000 * USDC_SCALE);
        userProxy.execute(
            address(positionAction),
            abi.encodeWithSelector(
                positionAction.increaseLever.selector,
                leverParams,
                address(USDC),
                1_000 * USDC_SCALE,
                address(user),
                emptyPermitParams
            )
        );

        }

        // decrease lever
        
        {

        bytes memory args = hex"e21fd0e900000000000000000000000000000000000000000000000000000000000000200000000000000000000000000f4a1d7fdf4890be35e71f3e0bbc4a0ec377eca3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004e000000000000000000000000000000000000000000000000000000000000007200000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000005c5b196abe0d54485975d1ec29617d42d9198326000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000003C786eec72204b391Fc3B339CEf2E84351999Ea60000000000000000000000000000000000000000000000000000000067d31e4500000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000408cc7a56b0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c841fdbea2e52790c0a1dc374f07b628741f2e062d0002000000000000000006be0000000000000000000000005c5b196abe0d54485975d1ec29617d42d919832600000000000000000000000015700b564ca08d9439c58ca5053166e8317aa138000000000000000000000000000000000000000000000105ce8ab37fddae4d000000000000000000000000000000000000000000000000000000000000000040d90ce4910000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001000000000000000000000000005f6c431ac417f0f430b84a666a563fabe681da9400000000000000000000000015700b564ca08d9439c58ca5053166e8317aa138000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000010e58b36e54b15fc0690000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000137b000000000000000000000001293ff4280000000000000000000000005c5b196abe0d54485975d1ec29617d42d9198326000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000002000000000000000000000000003C786eec72204b391Fc3B339CEf2E84351999Ea6000000000000000000000000000000000000000000000105ce8ab37fddae4d000000000000000000000000000000000000000000000000000000000127c379550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000f4a1d7fdf4890be35e71f3e0bbc4a0ec377eca30000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000105ce8ab37fddae4d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002537b22536f75726365223a226c6f6f70222c22416d6f756e74496e555344223a22343939332e3537323037313933333935222c22416d6f756e744f7574555344223a22343939332e323539373935303832323034222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a2234393837303234343234222c2254696d657374616d70223a313734313838373839332c22526f7574654944223a2264313965333930362d313764372d343166392d626330352d653338393637626130303065222c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a224f715234344a725269536a6e4368343143444a6b4f6a6d774c72546434486d4b4435386652742f695266372f4b47717361313668664b534553364731696c4b41644f756a644f79774f496c5342772b43714765555a78654163305071624872462f5170346b44342b67757569756239575431617a572f697058304674702f54396e2b4f4c724274694e677542456555385666503563324c68685641775863343871514c4f6b35533738664b562b4d745a5a614b315a7741335248787343586166754c6a447a6b5049716f7364567951585743574a697472705659324c5a6d75325432434a7277477358766e685a4773445744504563683159386d4638635a3132314a37736762503565525a4970412b7a386e346f786a4c775470526252323761436e7479706c784956507761673666764d696f4f616d694866316a616467694b5279656879497a6e4b6d3976465747306e6d436774413d3d227d7d00000000000000000000000000";
        
        bytes memory auxArgs = hex"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000005c5b196abe0d54485975d1ec29617d42d9198326ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000002000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000009d484b738dd85ce3953102453e91507982121d00000000000000000000000000000000000000000000000886800d4492488e0d400000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000fb7c3c95f4c2c05f6ec7dcfe3e368a40eb3386030000000000000000000000000000000000000000000000886800d4492488e0d400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d6b383288d59c7e4ecbb5564eb7e3b3f68bd20cf";
        
        LeverParams memory leverParams = LeverParams({
            position: address(userProxy),
            vault: address(vault),
            collateralToken: address(vaultCollateral),
            primarySwap: SwapParams({
                swapProtocol: SwapProtocol.SPECTRA,
                swapType: SwapType.EXACT_IN,
                assetIn: address(vaultCollateral),
                amount: 4000 * WAD,
                limit: 4000 * USDC_SCALE,
                recipient: address(positionAction),
                residualRecipient: address(user),
                deadline: type(uint256).max,
                args: args
            }),
            auxSwap: emptySwap,
            auxAction: PoolActionParams({
                protocol: Protocol.SPECTRA,
                minOut: 0,
                recipient: address(positionAction),
                args: auxArgs
            })
        });

        vm.startPrank(user);
        userProxy.execute(
            address(positionAction),
            abi.encodeWithSelector(
                positionAction.decreaseLever.selector,
                leverParams,
                2516251417215054176468,
                address(user)
            )
        );
        }

    }
}
